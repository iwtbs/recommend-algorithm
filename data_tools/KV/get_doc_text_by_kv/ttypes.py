#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ArticleInfo:
  """
  Attributes:
   - _id
   - url
   - topic
   - title_simhash
   - top5_keyword_sign
   - title
   - locate
   - locate_enable
   - account
   - account_openid
   - account_topic_list
   - account_tag_list
   - account_locate
   - account_weight
   - acc_sucscribe_num
   - original_sig
   - video_sig
   - group_type
   - page_time
   - source_type
   - kw_list
   - tag_list
   - merge_tag_list
   - quality_score
   - op_time
   - coeff_score
   - score
   - target_word
   - recall_reason_score
   - weixin_read_num
   - app_read_num
   - app_show_num
   - app_read_duration
   - app_favor_num
   - app_collect_num
   - app_share_num
   - news_sogourank_pv
   - news_comment_num
   - news_participant_num
   - article_attr_display
   - img_list
   - account_type
   - acc_region_level
   - acc_weixin_avg_read
   - acc_sogourank_avg_read
   - acc_app_avg_click
   - acc_app_avg_show
   - acc_app_avg_favor
   - acc_app_avg_share
   - acc_app_avg_duration
   - porn_score
   - base_quality_score
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, '_id', None, None, ), # 1
    (2, TType.STRING, 'url', None, None, ), # 2
    (3, TType.STRING, 'topic', None, None, ), # 3
    (4, TType.STRING, 'title_simhash', None, None, ), # 4
    (5, TType.STRING, 'top5_keyword_sign', None, None, ), # 5
    (6, TType.STRING, 'title', None, None, ), # 6
    (7, TType.STRING, 'locate', None, None, ), # 7
    (8, TType.I32, 'locate_enable', None, None, ), # 8
    (9, TType.STRING, 'account', None, None, ), # 9
    (10, TType.STRING, 'account_openid', None, None, ), # 10
    (11, TType.LIST, 'account_topic_list', (TType.STRING,None), None, ), # 11
    (12, TType.LIST, 'account_tag_list', (TType.STRING,None), None, ), # 12
    (13, TType.STRING, 'account_locate', None, None, ), # 13
    (14, TType.I32, 'account_weight', None, None, ), # 14
    (15, TType.I32, 'acc_sucscribe_num', None, None, ), # 15
    (16, TType.I32, 'original_sig', None, None, ), # 16
    (17, TType.I32, 'video_sig', None, None, ), # 17
    (18, TType.I32, 'group_type', None, None, ), # 18
    (19, TType.I64, 'page_time', None, None, ), # 19
    (20, TType.I32, 'source_type', None, None, ), # 20
    (21, TType.LIST, 'kw_list', (TType.STRING,None), None, ), # 21
    (22, TType.LIST, 'tag_list', (TType.STRING,None), None, ), # 22
    (23, TType.LIST, 'merge_tag_list', (TType.STRING,None), None, ), # 23
    (24, TType.DOUBLE, 'quality_score', None, None, ), # 24
    (25, TType.I32, 'op_time', None, None, ), # 25
    (26, TType.DOUBLE, 'coeff_score', None, None, ), # 26
    (27, TType.DOUBLE, 'score', None, None, ), # 27
    (28, TType.STRING, 'target_word', None, None, ), # 28
    (29, TType.DOUBLE, 'recall_reason_score', None, None, ), # 29
    (30, TType.I32, 'weixin_read_num', None, 0, ), # 30
    (31, TType.I32, 'app_read_num', None, 0, ), # 31
    (32, TType.I32, 'app_show_num', None, 0, ), # 32
    (33, TType.I32, 'app_read_duration', None, 0, ), # 33
    (34, TType.I32, 'app_favor_num', None, 0, ), # 34
    (35, TType.I32, 'app_collect_num', None, 0, ), # 35
    (36, TType.I32, 'app_share_num', None, 0, ), # 36
    (37, TType.I32, 'news_sogourank_pv', None, 0, ), # 37
    (38, TType.I32, 'news_comment_num', None, 0, ), # 38
    (39, TType.I32, 'news_participant_num', None, 0, ), # 39
    (40, TType.LIST, 'article_attr_display', (TType.LIST,(TType.STRING,None)), None, ), # 40
    (41, TType.LIST, 'img_list', (TType.STRING,None), None, ), # 41
    (42, TType.I32, 'account_type', None, None, ), # 42
    (43, TType.I32, 'acc_region_level', None, None, ), # 43
    (44, TType.I32, 'acc_weixin_avg_read', None, None, ), # 44
    (45, TType.I32, 'acc_sogourank_avg_read', None, None, ), # 45
    (46, TType.I32, 'acc_app_avg_click', None, None, ), # 46
    (47, TType.I32, 'acc_app_avg_show', None, None, ), # 47
    (48, TType.I32, 'acc_app_avg_favor', None, None, ), # 48
    (49, TType.I32, 'acc_app_avg_share', None, None, ), # 49
    (50, TType.I32, 'acc_app_avg_duration', None, None, ), # 50
    (51, TType.DOUBLE, 'porn_score', None, None, ), # 51
    (52, TType.DOUBLE, 'base_quality_score', None, None, ), # 52
  )

  def __init__(self, _id=None, url=None, topic=None, title_simhash=None, top5_keyword_sign=None, title=None, locate=None, locate_enable=None, account=None, account_openid=None, account_topic_list=None, account_tag_list=None, account_locate=None, account_weight=None, acc_sucscribe_num=None, original_sig=None, video_sig=None, group_type=None, page_time=None, source_type=None, kw_list=None, tag_list=None, merge_tag_list=None, quality_score=None, op_time=None, coeff_score=None, score=None, target_word=None, recall_reason_score=None, weixin_read_num=thrift_spec[30][4], app_read_num=thrift_spec[31][4], app_show_num=thrift_spec[32][4], app_read_duration=thrift_spec[33][4], app_favor_num=thrift_spec[34][4], app_collect_num=thrift_spec[35][4], app_share_num=thrift_spec[36][4], news_sogourank_pv=thrift_spec[37][4], news_comment_num=thrift_spec[38][4], news_participant_num=thrift_spec[39][4], article_attr_display=None, img_list=None, account_type=None, acc_region_level=None, acc_weixin_avg_read=None, acc_sogourank_avg_read=None, acc_app_avg_click=None, acc_app_avg_show=None, acc_app_avg_favor=None, acc_app_avg_share=None, acc_app_avg_duration=None, porn_score=None, base_quality_score=None,):
    self._id = _id
    self.url = url
    self.topic = topic
    self.title_simhash = title_simhash
    self.top5_keyword_sign = top5_keyword_sign
    self.title = title
    self.locate = locate
    self.locate_enable = locate_enable
    self.account = account
    self.account_openid = account_openid
    self.account_topic_list = account_topic_list
    self.account_tag_list = account_tag_list
    self.account_locate = account_locate
    self.account_weight = account_weight
    self.acc_sucscribe_num = acc_sucscribe_num
    self.original_sig = original_sig
    self.video_sig = video_sig
    self.group_type = group_type
    self.page_time = page_time
    self.source_type = source_type
    self.kw_list = kw_list
    self.tag_list = tag_list
    self.merge_tag_list = merge_tag_list
    self.quality_score = quality_score
    self.op_time = op_time
    self.coeff_score = coeff_score
    self.score = score
    self.target_word = target_word
    self.recall_reason_score = recall_reason_score
    self.weixin_read_num = weixin_read_num
    self.app_read_num = app_read_num
    self.app_show_num = app_show_num
    self.app_read_duration = app_read_duration
    self.app_favor_num = app_favor_num
    self.app_collect_num = app_collect_num
    self.app_share_num = app_share_num
    self.news_sogourank_pv = news_sogourank_pv
    self.news_comment_num = news_comment_num
    self.news_participant_num = news_participant_num
    self.article_attr_display = article_attr_display
    self.img_list = img_list
    self.account_type = account_type
    self.acc_region_level = acc_region_level
    self.acc_weixin_avg_read = acc_weixin_avg_read
    self.acc_sogourank_avg_read = acc_sogourank_avg_read
    self.acc_app_avg_click = acc_app_avg_click
    self.acc_app_avg_show = acc_app_avg_show
    self.acc_app_avg_favor = acc_app_avg_favor
    self.acc_app_avg_share = acc_app_avg_share
    self.acc_app_avg_duration = acc_app_avg_duration
    self.porn_score = porn_score
    self.base_quality_score = base_quality_score

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self._id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.topic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.title_simhash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.top5_keyword_sign = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.locate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.locate_enable = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.account = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.account_openid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.account_topic_list = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.account_topic_list.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.account_tag_list = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.account_tag_list.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.account_locate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.account_weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.acc_sucscribe_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.original_sig = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.video_sig = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.group_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.page_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.source_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.kw_list = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readString();
            self.kw_list.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.LIST:
          self.tag_list = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readString();
            self.tag_list.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.LIST:
          self.merge_tag_list = []
          (_etype27, _size24) = iprot.readListBegin()
          for _i28 in xrange(_size24):
            _elem29 = iprot.readString();
            self.merge_tag_list.append(_elem29)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.DOUBLE:
          self.quality_score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.op_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.DOUBLE:
          self.coeff_score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.target_word = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.DOUBLE:
          self.recall_reason_score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.weixin_read_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.app_read_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.app_show_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.app_read_duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.app_favor_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.app_collect_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.app_share_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I32:
          self.news_sogourank_pv = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.I32:
          self.news_comment_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.I32:
          self.news_participant_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.LIST:
          self.article_attr_display = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = []
            (_etype39, _size36) = iprot.readListBegin()
            for _i40 in xrange(_size36):
              _elem41 = iprot.readString();
              _elem35.append(_elem41)
            iprot.readListEnd()
            self.article_attr_display.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.LIST:
          self.img_list = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = iprot.readString();
            self.img_list.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.I32:
          self.account_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.I32:
          self.acc_region_level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.I32:
          self.acc_weixin_avg_read = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.I32:
          self.acc_sogourank_avg_read = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.I32:
          self.acc_app_avg_click = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.I32:
          self.acc_app_avg_show = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.I32:
          self.acc_app_avg_favor = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.I32:
          self.acc_app_avg_share = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.acc_app_avg_duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.DOUBLE:
          self.porn_score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.DOUBLE:
          self.base_quality_score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ArticleInfo')
    if self._id is not None:
      oprot.writeFieldBegin('_id', TType.STRING, 1)
      oprot.writeString(self._id)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 2)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.topic is not None:
      oprot.writeFieldBegin('topic', TType.STRING, 3)
      oprot.writeString(self.topic)
      oprot.writeFieldEnd()
    if self.title_simhash is not None:
      oprot.writeFieldBegin('title_simhash', TType.STRING, 4)
      oprot.writeString(self.title_simhash)
      oprot.writeFieldEnd()
    if self.top5_keyword_sign is not None:
      oprot.writeFieldBegin('top5_keyword_sign', TType.STRING, 5)
      oprot.writeString(self.top5_keyword_sign)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 6)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.locate is not None:
      oprot.writeFieldBegin('locate', TType.STRING, 7)
      oprot.writeString(self.locate)
      oprot.writeFieldEnd()
    if self.locate_enable is not None:
      oprot.writeFieldBegin('locate_enable', TType.I32, 8)
      oprot.writeI32(self.locate_enable)
      oprot.writeFieldEnd()
    if self.account is not None:
      oprot.writeFieldBegin('account', TType.STRING, 9)
      oprot.writeString(self.account)
      oprot.writeFieldEnd()
    if self.account_openid is not None:
      oprot.writeFieldBegin('account_openid', TType.STRING, 10)
      oprot.writeString(self.account_openid)
      oprot.writeFieldEnd()
    if self.account_topic_list is not None:
      oprot.writeFieldBegin('account_topic_list', TType.LIST, 11)
      oprot.writeListBegin(TType.STRING, len(self.account_topic_list))
      for iter48 in self.account_topic_list:
        oprot.writeString(iter48)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.account_tag_list is not None:
      oprot.writeFieldBegin('account_tag_list', TType.LIST, 12)
      oprot.writeListBegin(TType.STRING, len(self.account_tag_list))
      for iter49 in self.account_tag_list:
        oprot.writeString(iter49)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.account_locate is not None:
      oprot.writeFieldBegin('account_locate', TType.STRING, 13)
      oprot.writeString(self.account_locate)
      oprot.writeFieldEnd()
    if self.account_weight is not None:
      oprot.writeFieldBegin('account_weight', TType.I32, 14)
      oprot.writeI32(self.account_weight)
      oprot.writeFieldEnd()
    if self.acc_sucscribe_num is not None:
      oprot.writeFieldBegin('acc_sucscribe_num', TType.I32, 15)
      oprot.writeI32(self.acc_sucscribe_num)
      oprot.writeFieldEnd()
    if self.original_sig is not None:
      oprot.writeFieldBegin('original_sig', TType.I32, 16)
      oprot.writeI32(self.original_sig)
      oprot.writeFieldEnd()
    if self.video_sig is not None:
      oprot.writeFieldBegin('video_sig', TType.I32, 17)
      oprot.writeI32(self.video_sig)
      oprot.writeFieldEnd()
    if self.group_type is not None:
      oprot.writeFieldBegin('group_type', TType.I32, 18)
      oprot.writeI32(self.group_type)
      oprot.writeFieldEnd()
    if self.page_time is not None:
      oprot.writeFieldBegin('page_time', TType.I64, 19)
      oprot.writeI64(self.page_time)
      oprot.writeFieldEnd()
    if self.source_type is not None:
      oprot.writeFieldBegin('source_type', TType.I32, 20)
      oprot.writeI32(self.source_type)
      oprot.writeFieldEnd()
    if self.kw_list is not None:
      oprot.writeFieldBegin('kw_list', TType.LIST, 21)
      oprot.writeListBegin(TType.STRING, len(self.kw_list))
      for iter50 in self.kw_list:
        oprot.writeString(iter50)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tag_list is not None:
      oprot.writeFieldBegin('tag_list', TType.LIST, 22)
      oprot.writeListBegin(TType.STRING, len(self.tag_list))
      for iter51 in self.tag_list:
        oprot.writeString(iter51)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.merge_tag_list is not None:
      oprot.writeFieldBegin('merge_tag_list', TType.LIST, 23)
      oprot.writeListBegin(TType.STRING, len(self.merge_tag_list))
      for iter52 in self.merge_tag_list:
        oprot.writeString(iter52)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.quality_score is not None:
      oprot.writeFieldBegin('quality_score', TType.DOUBLE, 24)
      oprot.writeDouble(self.quality_score)
      oprot.writeFieldEnd()
    if self.op_time is not None:
      oprot.writeFieldBegin('op_time', TType.I32, 25)
      oprot.writeI32(self.op_time)
      oprot.writeFieldEnd()
    if self.coeff_score is not None:
      oprot.writeFieldBegin('coeff_score', TType.DOUBLE, 26)
      oprot.writeDouble(self.coeff_score)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 27)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    if self.target_word is not None:
      oprot.writeFieldBegin('target_word', TType.STRING, 28)
      oprot.writeString(self.target_word)
      oprot.writeFieldEnd()
    if self.recall_reason_score is not None:
      oprot.writeFieldBegin('recall_reason_score', TType.DOUBLE, 29)
      oprot.writeDouble(self.recall_reason_score)
      oprot.writeFieldEnd()
    if self.weixin_read_num is not None:
      oprot.writeFieldBegin('weixin_read_num', TType.I32, 30)
      oprot.writeI32(self.weixin_read_num)
      oprot.writeFieldEnd()
    if self.app_read_num is not None:
      oprot.writeFieldBegin('app_read_num', TType.I32, 31)
      oprot.writeI32(self.app_read_num)
      oprot.writeFieldEnd()
    if self.app_show_num is not None:
      oprot.writeFieldBegin('app_show_num', TType.I32, 32)
      oprot.writeI32(self.app_show_num)
      oprot.writeFieldEnd()
    if self.app_read_duration is not None:
      oprot.writeFieldBegin('app_read_duration', TType.I32, 33)
      oprot.writeI32(self.app_read_duration)
      oprot.writeFieldEnd()
    if self.app_favor_num is not None:
      oprot.writeFieldBegin('app_favor_num', TType.I32, 34)
      oprot.writeI32(self.app_favor_num)
      oprot.writeFieldEnd()
    if self.app_collect_num is not None:
      oprot.writeFieldBegin('app_collect_num', TType.I32, 35)
      oprot.writeI32(self.app_collect_num)
      oprot.writeFieldEnd()
    if self.app_share_num is not None:
      oprot.writeFieldBegin('app_share_num', TType.I32, 36)
      oprot.writeI32(self.app_share_num)
      oprot.writeFieldEnd()
    if self.news_sogourank_pv is not None:
      oprot.writeFieldBegin('news_sogourank_pv', TType.I32, 37)
      oprot.writeI32(self.news_sogourank_pv)
      oprot.writeFieldEnd()
    if self.news_comment_num is not None:
      oprot.writeFieldBegin('news_comment_num', TType.I32, 38)
      oprot.writeI32(self.news_comment_num)
      oprot.writeFieldEnd()
    if self.news_participant_num is not None:
      oprot.writeFieldBegin('news_participant_num', TType.I32, 39)
      oprot.writeI32(self.news_participant_num)
      oprot.writeFieldEnd()
    if self.article_attr_display is not None:
      oprot.writeFieldBegin('article_attr_display', TType.LIST, 40)
      oprot.writeListBegin(TType.LIST, len(self.article_attr_display))
      for iter53 in self.article_attr_display:
        oprot.writeListBegin(TType.STRING, len(iter53))
        for iter54 in iter53:
          oprot.writeString(iter54)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.img_list is not None:
      oprot.writeFieldBegin('img_list', TType.LIST, 41)
      oprot.writeListBegin(TType.STRING, len(self.img_list))
      for iter55 in self.img_list:
        oprot.writeString(iter55)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.account_type is not None:
      oprot.writeFieldBegin('account_type', TType.I32, 42)
      oprot.writeI32(self.account_type)
      oprot.writeFieldEnd()
    if self.acc_region_level is not None:
      oprot.writeFieldBegin('acc_region_level', TType.I32, 43)
      oprot.writeI32(self.acc_region_level)
      oprot.writeFieldEnd()
    if self.acc_weixin_avg_read is not None:
      oprot.writeFieldBegin('acc_weixin_avg_read', TType.I32, 44)
      oprot.writeI32(self.acc_weixin_avg_read)
      oprot.writeFieldEnd()
    if self.acc_sogourank_avg_read is not None:
      oprot.writeFieldBegin('acc_sogourank_avg_read', TType.I32, 45)
      oprot.writeI32(self.acc_sogourank_avg_read)
      oprot.writeFieldEnd()
    if self.acc_app_avg_click is not None:
      oprot.writeFieldBegin('acc_app_avg_click', TType.I32, 46)
      oprot.writeI32(self.acc_app_avg_click)
      oprot.writeFieldEnd()
    if self.acc_app_avg_show is not None:
      oprot.writeFieldBegin('acc_app_avg_show', TType.I32, 47)
      oprot.writeI32(self.acc_app_avg_show)
      oprot.writeFieldEnd()
    if self.acc_app_avg_favor is not None:
      oprot.writeFieldBegin('acc_app_avg_favor', TType.I32, 48)
      oprot.writeI32(self.acc_app_avg_favor)
      oprot.writeFieldEnd()
    if self.acc_app_avg_share is not None:
      oprot.writeFieldBegin('acc_app_avg_share', TType.I32, 49)
      oprot.writeI32(self.acc_app_avg_share)
      oprot.writeFieldEnd()
    if self.acc_app_avg_duration is not None:
      oprot.writeFieldBegin('acc_app_avg_duration', TType.I32, 50)
      oprot.writeI32(self.acc_app_avg_duration)
      oprot.writeFieldEnd()
    if self.porn_score is not None:
      oprot.writeFieldBegin('porn_score', TType.DOUBLE, 51)
      oprot.writeDouble(self.porn_score)
      oprot.writeFieldEnd()
    if self.base_quality_score is not None:
      oprot.writeFieldBegin('base_quality_score', TType.DOUBLE, 52)
      oprot.writeDouble(self.base_quality_score)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self._id is None:
      raise TProtocol.TProtocolException(message='Required field _id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotFeature:
  """
  Attributes:
   - op_time
   - weixin_read_num
   - app_read_num
   - app_show_num
   - app_read_duration
   - app_favor_num
   - app_collect_num
   - app_share_num
   - news_sogourank_pv
   - news_comment_num
   - news_participant_num
   - sogou_search_index
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'op_time', None, 0, ), # 1
    (2, TType.I32, 'weixin_read_num', None, 0, ), # 2
    (3, TType.I32, 'app_read_num', None, 0, ), # 3
    (4, TType.I32, 'app_show_num', None, 0, ), # 4
    (5, TType.I32, 'app_read_duration', None, 0, ), # 5
    (6, TType.I32, 'app_favor_num', None, 0, ), # 6
    (7, TType.I32, 'app_collect_num', None, 0, ), # 7
    (8, TType.I32, 'app_share_num', None, 0, ), # 8
    (9, TType.I32, 'news_sogourank_pv', None, 0, ), # 9
    (10, TType.I32, 'news_comment_num', None, 0, ), # 10
    (11, TType.I32, 'news_participant_num', None, 0, ), # 11
    (12, TType.I32, 'sogou_search_index', None, 0, ), # 12
  )

  def __init__(self, op_time=thrift_spec[1][4], weixin_read_num=thrift_spec[2][4], app_read_num=thrift_spec[3][4], app_show_num=thrift_spec[4][4], app_read_duration=thrift_spec[5][4], app_favor_num=thrift_spec[6][4], app_collect_num=thrift_spec[7][4], app_share_num=thrift_spec[8][4], news_sogourank_pv=thrift_spec[9][4], news_comment_num=thrift_spec[10][4], news_participant_num=thrift_spec[11][4], sogou_search_index=thrift_spec[12][4],):
    self.op_time = op_time
    self.weixin_read_num = weixin_read_num
    self.app_read_num = app_read_num
    self.app_show_num = app_show_num
    self.app_read_duration = app_read_duration
    self.app_favor_num = app_favor_num
    self.app_collect_num = app_collect_num
    self.app_share_num = app_share_num
    self.news_sogourank_pv = news_sogourank_pv
    self.news_comment_num = news_comment_num
    self.news_participant_num = news_participant_num
    self.sogou_search_index = sogou_search_index

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.op_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.weixin_read_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.app_read_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.app_show_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.app_read_duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.app_favor_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.app_collect_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.app_share_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.news_sogourank_pv = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.news_comment_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.news_participant_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.sogou_search_index = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotFeature')
    if self.op_time is not None:
      oprot.writeFieldBegin('op_time', TType.I32, 1)
      oprot.writeI32(self.op_time)
      oprot.writeFieldEnd()
    if self.weixin_read_num is not None:
      oprot.writeFieldBegin('weixin_read_num', TType.I32, 2)
      oprot.writeI32(self.weixin_read_num)
      oprot.writeFieldEnd()
    if self.app_read_num is not None:
      oprot.writeFieldBegin('app_read_num', TType.I32, 3)
      oprot.writeI32(self.app_read_num)
      oprot.writeFieldEnd()
    if self.app_show_num is not None:
      oprot.writeFieldBegin('app_show_num', TType.I32, 4)
      oprot.writeI32(self.app_show_num)
      oprot.writeFieldEnd()
    if self.app_read_duration is not None:
      oprot.writeFieldBegin('app_read_duration', TType.I32, 5)
      oprot.writeI32(self.app_read_duration)
      oprot.writeFieldEnd()
    if self.app_favor_num is not None:
      oprot.writeFieldBegin('app_favor_num', TType.I32, 6)
      oprot.writeI32(self.app_favor_num)
      oprot.writeFieldEnd()
    if self.app_collect_num is not None:
      oprot.writeFieldBegin('app_collect_num', TType.I32, 7)
      oprot.writeI32(self.app_collect_num)
      oprot.writeFieldEnd()
    if self.app_share_num is not None:
      oprot.writeFieldBegin('app_share_num', TType.I32, 8)
      oprot.writeI32(self.app_share_num)
      oprot.writeFieldEnd()
    if self.news_sogourank_pv is not None:
      oprot.writeFieldBegin('news_sogourank_pv', TType.I32, 9)
      oprot.writeI32(self.news_sogourank_pv)
      oprot.writeFieldEnd()
    if self.news_comment_num is not None:
      oprot.writeFieldBegin('news_comment_num', TType.I32, 10)
      oprot.writeI32(self.news_comment_num)
      oprot.writeFieldEnd()
    if self.news_participant_num is not None:
      oprot.writeFieldBegin('news_participant_num', TType.I32, 11)
      oprot.writeI32(self.news_participant_num)
      oprot.writeFieldEnd()
    if self.sogou_search_index is not None:
      oprot.writeFieldBegin('sogou_search_index', TType.I32, 12)
      oprot.writeI32(self.sogou_search_index)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
